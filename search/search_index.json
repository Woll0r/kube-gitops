{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Kube-GitOps \u00b6 Welcome to the documentation of my Kubernetes cluster at home, running using GitOps. The story so far \u00b6 Back in 2018, while running Docker, I first came across this magical thing called Kubernetes. The first attempts at using it failed horribly, until in early 2020 I came across the repositories of people running it at home, with GitOps principles to keep things up to date and using K3S to make the installation and updating of Kubernetes itself a breeze. Fast forward about a year, Flux2 is now a thing and using Renovate to update everything, it was time to throw out the old cluster that barely has received any planning or thought and start anew. The new cluster will eventually replace the old, everything will stay up to date thanks to Renovate, there's actual documentation on how everything works ( you're reading that right now) and it's all nice and clean.","title":"Home"},{"location":"#kube-gitops","text":"Welcome to the documentation of my Kubernetes cluster at home, running using GitOps.","title":"Kube-GitOps"},{"location":"#the-story-so-far","text":"Back in 2018, while running Docker, I first came across this magical thing called Kubernetes. The first attempts at using it failed horribly, until in early 2020 I came across the repositories of people running it at home, with GitOps principles to keep things up to date and using K3S to make the installation and updating of Kubernetes itself a breeze. Fast forward about a year, Flux2 is now a thing and using Renovate to update everything, it was time to throw out the old cluster that barely has received any planning or thought and start anew. The new cluster will eventually replace the old, everything will stay up to date thanks to Renovate, there's actual documentation on how everything works ( you're reading that right now) and it's all nice and clean.","title":"The story so far"},{"location":"flux/","text":"Flux \u00b6 Install the CLI \u00b6 brew install fluxcd/tap/flux Install components \u00b6 For more details, see the Flux documentation Set Github access information with an access token from Github. export GITHUB_TOKEN = abc123def456ghi789 export GITHUB_USER = Woll0r Run the checks to make sure the cluster is ready. flux check --pre Install Flux. flux bootstrap github \\ --owner = $GITHUB_USER \\ --repository = kube-gitops \\ --interval = 5m \\ --branch = main \\ --path = ./cluster \\ --personal --network-policy = false Note Network policy and K3S don't seem to play nicely, hence it is getting disabled. Useful commands \u00b6 Force flux to sync your repository: flux reconcile source git flux-system Force flux to sync a helm release: flux reconcile helmrelease sonarr -n default Force flux to sync a helm repository: flux reconcile source helm ingress-nginx-charts -n flux-system","title":"Flux"},{"location":"flux/#flux","text":"","title":"Flux"},{"location":"flux/#install-the-cli","text":"brew install fluxcd/tap/flux","title":"Install the CLI"},{"location":"flux/#install-components","text":"For more details, see the Flux documentation Set Github access information with an access token from Github. export GITHUB_TOKEN = abc123def456ghi789 export GITHUB_USER = Woll0r Run the checks to make sure the cluster is ready. flux check --pre Install Flux. flux bootstrap github \\ --owner = $GITHUB_USER \\ --repository = kube-gitops \\ --interval = 5m \\ --branch = main \\ --path = ./cluster \\ --personal --network-policy = false Note Network policy and K3S don't seem to play nicely, hence it is getting disabled.","title":"Install components"},{"location":"flux/#useful-commands","text":"Force flux to sync your repository: flux reconcile source git flux-system Force flux to sync a helm release: flux reconcile helmrelease sonarr -n default Force flux to sync a helm repository: flux reconcile source helm ingress-nginx-charts -n flux-system","title":"Useful commands"},{"location":"repostructure/","text":"Repository structure \u00b6 Overview \u00b6 The repo is structured in a way to make it easier as a human to follow the structure and for Flux to read the structure, along with using specific files and folders in certain locations makes everything work. The cluster folder \u00b6 The cluster folder contains all of the Kubernetes manifests used by Flux to populate the cluster. Inside the folder, there is a division in different folders, each with their own purpose Alongside these, there is also the kustomization.yaml file to apply everything and the other named yaml files, one per folder. flux-system \u00b6 The flux-system folder is the one holding all of the files related to and needed by Flux to do the basic parts of it's job. namespaces and crds \u00b6 These folders contain CustomResourceDefinition and Namespace objects. It is the first set of manifests to be applied after Flux's own manifests and is required to be one of the first things to apply because later resources make use of the custom resources defined in here or are placed in namespaces that might not exist otherwise. infra \u00b6 The infra folder contains all underlying infrastructure items, such as storage, monitoring, certificates, ingress, DNS and oauth2 provider. These are placed in folders per namespace, similar to the apps folder later on. The items in this folder depend on both namespaces and crds to be applied. apps \u00b6 This folder contains all of the user facing applications running in the cluster. They have a dependency on (one or more parts of) infra and by extension crds and namespaces . The docs folder \u00b6 Contains the MarkDown files for the documentation you are reading right now. The rest \u00b6 All of the other files are configuration files, scripts to generate secrets, and helper files to make life easier when working on the contents of the repo.","title":"Repo structure"},{"location":"repostructure/#repository-structure","text":"","title":"Repository structure"},{"location":"repostructure/#overview","text":"The repo is structured in a way to make it easier as a human to follow the structure and for Flux to read the structure, along with using specific files and folders in certain locations makes everything work.","title":"Overview"},{"location":"repostructure/#the-cluster-folder","text":"The cluster folder contains all of the Kubernetes manifests used by Flux to populate the cluster. Inside the folder, there is a division in different folders, each with their own purpose Alongside these, there is also the kustomization.yaml file to apply everything and the other named yaml files, one per folder.","title":"The cluster folder"},{"location":"repostructure/#flux-system","text":"The flux-system folder is the one holding all of the files related to and needed by Flux to do the basic parts of it's job.","title":"flux-system"},{"location":"repostructure/#namespaces-and-crds","text":"These folders contain CustomResourceDefinition and Namespace objects. It is the first set of manifests to be applied after Flux's own manifests and is required to be one of the first things to apply because later resources make use of the custom resources defined in here or are placed in namespaces that might not exist otherwise.","title":"namespaces and crds"},{"location":"repostructure/#infra","text":"The infra folder contains all underlying infrastructure items, such as storage, monitoring, certificates, ingress, DNS and oauth2 provider. These are placed in folders per namespace, similar to the apps folder later on. The items in this folder depend on both namespaces and crds to be applied.","title":"infra"},{"location":"repostructure/#apps","text":"This folder contains all of the user facing applications running in the cluster. They have a dependency on (one or more parts of) infra and by extension crds and namespaces .","title":"apps"},{"location":"repostructure/#the-docs-folder","text":"Contains the MarkDown files for the documentation you are reading right now.","title":"The docs folder"},{"location":"repostructure/#the-rest","text":"All of the other files are configuration files, scripts to generate secrets, and helper files to make life easier when working on the contents of the repo.","title":"The rest"}]}